// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bidmachine/protobuf/extensions.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "bidmachine/protobuf/Extensions.pbobjc.h"
#import "bidmachine/protobuf/adcom/Adcom.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - BDMExtensionsRoot

@implementation BDMExtensionsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - BDMExtensionsRoot_FileDescriptor

static GPBFileDescriptor *BDMExtensionsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"bidmachine.protobuf"
                                                 objcPrefix:@"BDM"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum BDMEventTypeExtended

GPBEnumDescriptor *BDMEventTypeExtended_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "EventTypeExtendedInvalid\000EventTypeExtend"
        "edLoaded\000EventTypeExtendedImpression\000Eve"
        "ntTypeExtendedViewable\000EventTypeExtended"
        "Click\000EventTypeExtendedClosed\000EventTypeE"
        "xtendedDestroyed\000EventTypeExtendedInitLo"
        "aded\000EventTypeExtendedRequestLoaded\000Even"
        "tTypeExtendedRequestCanceled\000EventTypeEx"
        "tendedStarted\000EventTypeExtendedFirstQuar"
        "tile\000EventTypeExtendedMidpoint\000EventType"
        "ExtendedThirdQuartile\000EventTypeExtendedC"
        "ompleted\000EventTypeExtendedError\000EventTyp"
        "eExtendedTrackingError\000EventTypeExtended"
        "Fill\000EventTypeExtendedFinish\000";
    static const int32_t values[] = {
        BDMEventTypeExtended_EventTypeExtendedInvalid,
        BDMEventTypeExtended_EventTypeExtendedLoaded,
        BDMEventTypeExtended_EventTypeExtendedImpression,
        BDMEventTypeExtended_EventTypeExtendedViewable,
        BDMEventTypeExtended_EventTypeExtendedClick,
        BDMEventTypeExtended_EventTypeExtendedClosed,
        BDMEventTypeExtended_EventTypeExtendedDestroyed,
        BDMEventTypeExtended_EventTypeExtendedInitLoaded,
        BDMEventTypeExtended_EventTypeExtendedRequestLoaded,
        BDMEventTypeExtended_EventTypeExtendedRequestCanceled,
        BDMEventTypeExtended_EventTypeExtendedStarted,
        BDMEventTypeExtended_EventTypeExtendedFirstQuartile,
        BDMEventTypeExtended_EventTypeExtendedMidpoint,
        BDMEventTypeExtended_EventTypeExtendedThirdQuartile,
        BDMEventTypeExtended_EventTypeExtendedCompleted,
        BDMEventTypeExtended_EventTypeExtendedError,
        BDMEventTypeExtended_EventTypeExtendedTrackingError,
        BDMEventTypeExtended_EventTypeExtendedFill,
        BDMEventTypeExtended_EventTypeExtendedFinish,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(BDMEventTypeExtended)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:BDMEventTypeExtended_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL BDMEventTypeExtended_IsValidValue(int32_t value__) {
  switch (value__) {
    case BDMEventTypeExtended_EventTypeExtendedInvalid:
    case BDMEventTypeExtended_EventTypeExtendedLoaded:
    case BDMEventTypeExtended_EventTypeExtendedImpression:
    case BDMEventTypeExtended_EventTypeExtendedViewable:
    case BDMEventTypeExtended_EventTypeExtendedClick:
    case BDMEventTypeExtended_EventTypeExtendedClosed:
    case BDMEventTypeExtended_EventTypeExtendedDestroyed:
    case BDMEventTypeExtended_EventTypeExtendedInitLoaded:
    case BDMEventTypeExtended_EventTypeExtendedRequestLoaded:
    case BDMEventTypeExtended_EventTypeExtendedRequestCanceled:
    case BDMEventTypeExtended_EventTypeExtendedStarted:
    case BDMEventTypeExtended_EventTypeExtendedFirstQuartile:
    case BDMEventTypeExtended_EventTypeExtendedMidpoint:
    case BDMEventTypeExtended_EventTypeExtendedCompleted:
    case BDMEventTypeExtended_EventTypeExtendedError:
    case BDMEventTypeExtended_EventTypeExtendedTrackingError:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum BDMActionType

GPBEnumDescriptor *BDMActionType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ActionTypeTypeInvalid\000ActionTypeLoading\000"
        "ActionTypeShowing\000ActionTypeViewing\000Acti"
        "onTypeClicking\000ActionTypeClosing\000ActionT"
        "ypeDestroying\000ActionTypeInitializing\000Act"
        "ionTypeRequestLoading\000ActionTypeRequestC"
        "anceling\000";
    static const int32_t values[] = {
        BDMActionType_ActionTypeTypeInvalid,
        BDMActionType_ActionTypeLoading,
        BDMActionType_ActionTypeShowing,
        BDMActionType_ActionTypeViewing,
        BDMActionType_ActionTypeClicking,
        BDMActionType_ActionTypeClosing,
        BDMActionType_ActionTypeDestroying,
        BDMActionType_ActionTypeInitializing,
        BDMActionType_ActionTypeRequestLoading,
        BDMActionType_ActionTypeRequestCanceling,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(BDMActionType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:BDMActionType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL BDMActionType_IsValidValue(int32_t value__) {
  switch (value__) {
    case BDMActionType_ActionTypeTypeInvalid:
    case BDMActionType_ActionTypeLoading:
    case BDMActionType_ActionTypeShowing:
    case BDMActionType_ActionTypeViewing:
    case BDMActionType_ActionTypeClicking:
    case BDMActionType_ActionTypeClosing:
    case BDMActionType_ActionTypeDestroying:
    case BDMActionType_ActionTypeInitializing:
    case BDMActionType_ActionTypeRequestLoading:
    case BDMActionType_ActionTypeRequestCanceling:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum BDMErrorReason

GPBEnumDescriptor *BDMErrorReason_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ErrorReasonInvalid\000ErrorReasonNoConnecti"
        "on\000ErrorReasonBadContent\000ErrorReasonTime"
        "out\000ErrorReasonNoContent\000ErrorReasonHand"
        "ledException\000ErrorReasonWasClosed\000ErrorR"
        "easonWasDestroyed\000ErrorReasonWasExpired\000"
        "ErrorReasonInternal\000ErrorReasonHTTPServe"
        "rError\000ErrorReasonHTTPBadRequest\000";
    static const int32_t values[] = {
        BDMErrorReason_ErrorReasonInvalid,
        BDMErrorReason_ErrorReasonNoConnection,
        BDMErrorReason_ErrorReasonBadContent,
        BDMErrorReason_ErrorReasonTimeout,
        BDMErrorReason_ErrorReasonNoContent,
        BDMErrorReason_ErrorReasonHandledException,
        BDMErrorReason_ErrorReasonWasClosed,
        BDMErrorReason_ErrorReasonWasDestroyed,
        BDMErrorReason_ErrorReasonWasExpired,
        BDMErrorReason_ErrorReasonInternal,
        BDMErrorReason_ErrorReasonHTTPServerError,
        BDMErrorReason_ErrorReasonHTTPBadRequest,
    };
    static const char *extraTextFormatInfo = "\002\ne\346\204\346\345\000\013e\346\204\343\347\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(BDMErrorReason)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:BDMErrorReason_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL BDMErrorReason_IsValidValue(int32_t value__) {
  switch (value__) {
    case BDMErrorReason_ErrorReasonInvalid:
    case BDMErrorReason_ErrorReasonNoConnection:
    case BDMErrorReason_ErrorReasonBadContent:
    case BDMErrorReason_ErrorReasonTimeout:
    case BDMErrorReason_ErrorReasonNoContent:
    case BDMErrorReason_ErrorReasonHandledException:
    case BDMErrorReason_ErrorReasonWasClosed:
    case BDMErrorReason_ErrorReasonWasDestroyed:
    case BDMErrorReason_ErrorReasonWasExpired:
    case BDMErrorReason_ErrorReasonInternal:
    case BDMErrorReason_ErrorReasonHTTPServerError:
    case BDMErrorReason_ErrorReasonHTTPBadRequest:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum BDMApiFrameworkExtended

GPBEnumDescriptor *BDMApiFrameworkExtended_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ApiFrameworkExtendedInvalid\000ApiFramework"
        "ExtendedAdcolony\000ApiFrameworkExtendedApp"
        "lovin\000ApiFrameworkExtendedSmaato\000ApiFram"
        "eworkExtendedVungle\000ApiFrameworkExtended"
        "Mytarget\000ApiFrameworkExtendedTapjoy\000ApiF"
        "rameworkExtendedPubnative\000";
    static const int32_t values[] = {
        BDMApiFrameworkExtended_ApiFrameworkExtendedInvalid,
        BDMApiFrameworkExtended_ApiFrameworkExtendedAdcolony,
        BDMApiFrameworkExtended_ApiFrameworkExtendedApplovin,
        BDMApiFrameworkExtended_ApiFrameworkExtendedSmaato,
        BDMApiFrameworkExtended_ApiFrameworkExtendedVungle,
        BDMApiFrameworkExtended_ApiFrameworkExtendedMytarget,
        BDMApiFrameworkExtended_ApiFrameworkExtendedTapjoy,
        BDMApiFrameworkExtended_ApiFrameworkExtendedPubnative,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(BDMApiFrameworkExtended)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:BDMApiFrameworkExtended_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL BDMApiFrameworkExtended_IsValidValue(int32_t value__) {
  switch (value__) {
    case BDMApiFrameworkExtended_ApiFrameworkExtendedInvalid:
    case BDMApiFrameworkExtended_ApiFrameworkExtendedAdcolony:
    case BDMApiFrameworkExtended_ApiFrameworkExtendedApplovin:
    case BDMApiFrameworkExtended_ApiFrameworkExtendedSmaato:
    case BDMApiFrameworkExtended_ApiFrameworkExtendedVungle:
    case BDMApiFrameworkExtended_ApiFrameworkExtendedMytarget:
    case BDMApiFrameworkExtended_ApiFrameworkExtendedTapjoy:
    case BDMApiFrameworkExtended_ApiFrameworkExtendedPubnative:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - BDMRequestExtension

@implementation BDMRequestExtension

@dynamic sellerId;
@dynamic sellerData, sellerData_Count;

typedef struct BDMRequestExtension__storage_ {
  uint32_t _has_storage_[1];
  NSString *sellerId;
  NSMutableDictionary *sellerData;
} BDMRequestExtension__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sellerId",
        .dataTypeSpecific.className = NULL,
        .number = BDMRequestExtension_FieldNumber_SellerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BDMRequestExtension__storage_, sellerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sellerData",
        .dataTypeSpecific.className = NULL,
        .number = BDMRequestExtension_FieldNumber_SellerData,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BDMRequestExtension__storage_, sellerData),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BDMRequestExtension class]
                                     rootClass:[BDMExtensionsRoot class]
                                          file:BDMExtensionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BDMRequestExtension__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BDMPlacementExtension

@implementation BDMPlacementExtension

@dynamic adSpaceId;
@dynamic cacheArray, cacheArray_Count;

typedef struct BDMPlacementExtension__storage_ {
  uint32_t _has_storage_[1];
  NSString *adSpaceId;
  NSMutableArray *cacheArray;
} BDMPlacementExtension__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "adSpaceId",
        .dataTypeSpecific.className = NULL,
        .number = BDMPlacementExtension_FieldNumber_AdSpaceId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BDMPlacementExtension__storage_, adSpaceId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cacheArray",
        .dataTypeSpecific.className = GPBStringifySymbol(BDMPlacementExtension_CachedPlacement),
        .number = BDMPlacementExtension_FieldNumber_CacheArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BDMPlacementExtension__storage_, cacheArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BDMPlacementExtension class]
                                     rootClass:[BDMExtensionsRoot class]
                                          file:BDMExtensionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BDMPlacementExtension__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BDMPlacementExtension_CachedPlacement

@implementation BDMPlacementExtension_CachedPlacement

@dynamic api;
@dynamic priceEstimate;
@dynamic tokens, tokens_Count;
@dynamic extArray, extArray_Count;

typedef struct BDMPlacementExtension_CachedPlacement__storage_ {
  uint32_t _has_storage_[1];
  ADCOMApiFramework api;
  NSMutableDictionary *tokens;
  NSMutableArray *extArray;
  double priceEstimate;
} BDMPlacementExtension_CachedPlacement__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "api",
        .dataTypeSpecific.enumDescFunc = ADCOMApiFramework_EnumDescriptor,
        .number = BDMPlacementExtension_CachedPlacement_FieldNumber_Api,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BDMPlacementExtension_CachedPlacement__storage_, api),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "priceEstimate",
        .dataTypeSpecific.className = NULL,
        .number = BDMPlacementExtension_CachedPlacement_FieldNumber_PriceEstimate,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BDMPlacementExtension_CachedPlacement__storage_, priceEstimate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "tokens",
        .dataTypeSpecific.className = NULL,
        .number = BDMPlacementExtension_CachedPlacement_FieldNumber_Tokens,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BDMPlacementExtension_CachedPlacement__storage_, tokens),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = BDMPlacementExtension_CachedPlacement_FieldNumber_ExtArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BDMPlacementExtension_CachedPlacement__storage_, extArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BDMPlacementExtension_CachedPlacement class]
                                     rootClass:[BDMExtensionsRoot class]
                                          file:BDMExtensionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BDMPlacementExtension_CachedPlacement__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(BDMPlacementExtension)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t BDMPlacementExtension_CachedPlacement_Api_RawValue(BDMPlacementExtension_CachedPlacement *message) {
  GPBDescriptor *descriptor = [BDMPlacementExtension_CachedPlacement descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BDMPlacementExtension_CachedPlacement_FieldNumber_Api];
  return GPBGetMessageInt32Field(message, field);
}

void SetBDMPlacementExtension_CachedPlacement_Api_RawValue(BDMPlacementExtension_CachedPlacement *message, int32_t value) {
  GPBDescriptor *descriptor = [BDMPlacementExtension_CachedPlacement descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BDMPlacementExtension_CachedPlacement_FieldNumber_Api];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - BDMAdExtension

@implementation BDMAdExtension

@dynamic tokens, tokens_Count;
@dynamic preload;
@dynamic skipAfter;
@dynamic viewabilityTimeThreshold;
@dynamic viewabilityPixelThreshold;
@dynamic viewabilityDurationThreshold;
@dynamic eventArray, eventArray_Count;

typedef struct BDMAdExtension__storage_ {
  uint32_t _has_storage_[1];
  uint32_t skipAfter;
  uint32_t viewabilityTimeThreshold;
  float viewabilityPixelThreshold;
  float viewabilityDurationThreshold;
  NSMutableDictionary *tokens;
  NSMutableArray *eventArray;
} BDMAdExtension__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokens",
        .dataTypeSpecific.className = NULL,
        .number = BDMAdExtension_FieldNumber_Tokens,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BDMAdExtension__storage_, tokens),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "preload",
        .dataTypeSpecific.className = NULL,
        .number = BDMAdExtension_FieldNumber_Preload,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "skipAfter",
        .dataTypeSpecific.className = NULL,
        .number = BDMAdExtension_FieldNumber_SkipAfter,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BDMAdExtension__storage_, skipAfter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "viewabilityTimeThreshold",
        .dataTypeSpecific.className = NULL,
        .number = BDMAdExtension_FieldNumber_ViewabilityTimeThreshold,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BDMAdExtension__storage_, viewabilityTimeThreshold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "viewabilityPixelThreshold",
        .dataTypeSpecific.className = NULL,
        .number = BDMAdExtension_FieldNumber_ViewabilityPixelThreshold,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(BDMAdExtension__storage_, viewabilityPixelThreshold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "viewabilityDurationThreshold",
        .dataTypeSpecific.className = NULL,
        .number = BDMAdExtension_FieldNumber_ViewabilityDurationThreshold,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(BDMAdExtension__storage_, viewabilityDurationThreshold),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "eventArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ADCOMAd_Event),
        .number = BDMAdExtension_FieldNumber_EventArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BDMAdExtension__storage_, eventArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BDMAdExtension class]
                                     rootClass:[BDMExtensionsRoot class]
                                          file:BDMExtensionsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BDMAdExtension__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
