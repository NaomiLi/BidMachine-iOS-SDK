// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bidmachine/protobuf/openrtb/openrtb.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "bidmachine/protobuf/openrtb/Openrtb.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - ORTBOpenrtbRoot

@implementation ORTBOpenrtbRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ORTBOpenrtbRoot_FileDescriptor

static GPBFileDescriptor *ORTBOpenrtbRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"bidmachine.protobuf.openrtb"
                                                 objcPrefix:@"ORTB"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum ORTBNoBidReason

GPBEnumDescriptor *ORTBNoBidReason_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NoBidReasonInvalid\000NoBidReasonTechnicalE"
        "rror\000NoBidReasonInvalidRequest\000NoBidReas"
        "onKnownWebCrawler\000NoBidReasonNonHumanTra"
        "ffic\000NoBidReasonProxyIp\000NoBidReasonUnsup"
        "portedDevice\000NoBidReasonBlocked\000NoBidRea"
        "sonUnmatchedUser\000NoBidReasonDailyUserCap"
        "Met\000NoBidReasonDailyDomainCapMet\000NoBidRe"
        "asonAdsTxtAuthorizationUnavailable\000NoBid"
        "ReasonAdsTxtAuthorizationViolation\000NoBid"
        "ReasonAdsCertAuthenticationUnavailable\000N"
        "oBidReasonAdsCertAuthenticationViolation"
        "\000NoBidReasonInsufficientAuctionTime\000";
    static const int32_t values[] = {
        ORTBNoBidReason_NoBidReasonInvalid,
        ORTBNoBidReason_NoBidReasonTechnicalError,
        ORTBNoBidReason_NoBidReasonInvalidRequest,
        ORTBNoBidReason_NoBidReasonKnownWebCrawler,
        ORTBNoBidReason_NoBidReasonNonHumanTraffic,
        ORTBNoBidReason_NoBidReasonProxyIp,
        ORTBNoBidReason_NoBidReasonUnsupportedDevice,
        ORTBNoBidReason_NoBidReasonBlocked,
        ORTBNoBidReason_NoBidReasonUnmatchedUser,
        ORTBNoBidReason_NoBidReasonDailyUserCapMet,
        ORTBNoBidReason_NoBidReasonDailyDomainCapMet,
        ORTBNoBidReason_NoBidReasonAdsTxtAuthorizationUnavailable,
        ORTBNoBidReason_NoBidReasonAdsTxtAuthorizationViolation,
        ORTBNoBidReason_NoBidReasonAdsCertAuthenticationUnavailable,
        ORTBNoBidReason_NoBidReasonAdsCertAuthenticationViolation,
        ORTBNoBidReason_NoBidReasonInsufficientAuctionTime,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ORTBNoBidReason)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ORTBNoBidReason_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ORTBNoBidReason_IsValidValue(int32_t value__) {
  switch (value__) {
    case ORTBNoBidReason_NoBidReasonInvalid:
    case ORTBNoBidReason_NoBidReasonTechnicalError:
    case ORTBNoBidReason_NoBidReasonInvalidRequest:
    case ORTBNoBidReason_NoBidReasonKnownWebCrawler:
    case ORTBNoBidReason_NoBidReasonNonHumanTraffic:
    case ORTBNoBidReason_NoBidReasonProxyIp:
    case ORTBNoBidReason_NoBidReasonUnsupportedDevice:
    case ORTBNoBidReason_NoBidReasonBlocked:
    case ORTBNoBidReason_NoBidReasonUnmatchedUser:
    case ORTBNoBidReason_NoBidReasonDailyUserCapMet:
    case ORTBNoBidReason_NoBidReasonDailyDomainCapMet:
    case ORTBNoBidReason_NoBidReasonAdsTxtAuthorizationUnavailable:
    case ORTBNoBidReason_NoBidReasonAdsTxtAuthorizationViolation:
    case ORTBNoBidReason_NoBidReasonAdsCertAuthenticationUnavailable:
    case ORTBNoBidReason_NoBidReasonAdsCertAuthenticationViolation:
    case ORTBNoBidReason_NoBidReasonInsufficientAuctionTime:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ORTBLossReason

GPBEnumDescriptor *ORTBLossReason_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "LossReasonBidWon\000LossReasonInternalError"
        "\000LossReasonImpressionOpportunityExpired\000"
        "LossReasonInvalidBidResponse\000LossReasonI"
        "nvalidDealId\000LossReasonInvalidAuctionId\000"
        "LossReasonInvalidAdvertiserDomain\000LossRe"
        "asonMissingMarkup\000LossReasonMissingCreat"
        "iveId\000LossReasonMissingBidPrice\000LossReas"
        "onMissingCreativeApprovalData\000LossReason"
        "BelowAuctionFloor\000LossReasonBelowDealFlo"
        "or\000LossReasonLostToHigherBid\000LossReasonL"
        "ostToADeal\000LossReasonSeatBlocked\000LossRea"
        "sonCreativeFilteredGeneral\000LossReasonCre"
        "ativeFilteredPendingProcessing\000LossReaso"
        "nCreativeFilteredDisapproved\000LossReasonC"
        "reativeFilteredSizeNotAllowed\000LossReason"
        "CreativeFilteredIncorrectCreativeFormat\000"
        "LossReasonCreativeFilteredAdvertiserExcl"
        "usions\000LossReasonCreativeFilteredNotSecu"
        "re\000LossReasonCreativeFilteredLanguageExc"
        "lusions\000LossReasonCreativeFilteredCatego"
        "ryExclusions\000LossReasonCreativeFilteredC"
        "reativeAttributeExclusions\000LossReasonCre"
        "ativeFilteredAdTypeExclusions\000LossReason"
        "CreativeFilteredAnimationTooLong\000LossRea"
        "sonCreativeFilteredNotAllowedInDeal\000";
    static const int32_t values[] = {
        ORTBLossReason_LossReasonBidWon,
        ORTBLossReason_LossReasonInternalError,
        ORTBLossReason_LossReasonImpressionOpportunityExpired,
        ORTBLossReason_LossReasonInvalidBidResponse,
        ORTBLossReason_LossReasonInvalidDealId,
        ORTBLossReason_LossReasonInvalidAuctionId,
        ORTBLossReason_LossReasonInvalidAdvertiserDomain,
        ORTBLossReason_LossReasonMissingMarkup,
        ORTBLossReason_LossReasonMissingCreativeId,
        ORTBLossReason_LossReasonMissingBidPrice,
        ORTBLossReason_LossReasonMissingCreativeApprovalData,
        ORTBLossReason_LossReasonBelowAuctionFloor,
        ORTBLossReason_LossReasonBelowDealFloor,
        ORTBLossReason_LossReasonLostToHigherBid,
        ORTBLossReason_LossReasonLostToADeal,
        ORTBLossReason_LossReasonSeatBlocked,
        ORTBLossReason_LossReasonCreativeFilteredGeneral,
        ORTBLossReason_LossReasonCreativeFilteredPendingProcessing,
        ORTBLossReason_LossReasonCreativeFilteredDisapproved,
        ORTBLossReason_LossReasonCreativeFilteredSizeNotAllowed,
        ORTBLossReason_LossReasonCreativeFilteredIncorrectCreativeFormat,
        ORTBLossReason_LossReasonCreativeFilteredAdvertiserExclusions,
        ORTBLossReason_LossReasonCreativeFilteredNotSecure,
        ORTBLossReason_LossReasonCreativeFilteredLanguageExclusions,
        ORTBLossReason_LossReasonCreativeFilteredCategoryExclusions,
        ORTBLossReason_LossReasonCreativeFilteredCreativeAttributeExclusions,
        ORTBLossReason_LossReasonCreativeFilteredAdTypeExclusions,
        ORTBLossReason_LossReasonCreativeFilteredAnimationTooLong,
        ORTBLossReason_LossReasonCreativeFilteredNotAllowedInDeal,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ORTBLossReason)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ORTBLossReason_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ORTBLossReason_IsValidValue(int32_t value__) {
  switch (value__) {
    case ORTBLossReason_LossReasonBidWon:
    case ORTBLossReason_LossReasonInternalError:
    case ORTBLossReason_LossReasonImpressionOpportunityExpired:
    case ORTBLossReason_LossReasonInvalidBidResponse:
    case ORTBLossReason_LossReasonInvalidDealId:
    case ORTBLossReason_LossReasonInvalidAuctionId:
    case ORTBLossReason_LossReasonInvalidAdvertiserDomain:
    case ORTBLossReason_LossReasonMissingMarkup:
    case ORTBLossReason_LossReasonMissingCreativeId:
    case ORTBLossReason_LossReasonMissingBidPrice:
    case ORTBLossReason_LossReasonMissingCreativeApprovalData:
    case ORTBLossReason_LossReasonBelowAuctionFloor:
    case ORTBLossReason_LossReasonBelowDealFloor:
    case ORTBLossReason_LossReasonLostToHigherBid:
    case ORTBLossReason_LossReasonLostToADeal:
    case ORTBLossReason_LossReasonSeatBlocked:
    case ORTBLossReason_LossReasonCreativeFilteredGeneral:
    case ORTBLossReason_LossReasonCreativeFilteredPendingProcessing:
    case ORTBLossReason_LossReasonCreativeFilteredDisapproved:
    case ORTBLossReason_LossReasonCreativeFilteredSizeNotAllowed:
    case ORTBLossReason_LossReasonCreativeFilteredIncorrectCreativeFormat:
    case ORTBLossReason_LossReasonCreativeFilteredAdvertiserExclusions:
    case ORTBLossReason_LossReasonCreativeFilteredNotSecure:
    case ORTBLossReason_LossReasonCreativeFilteredLanguageExclusions:
    case ORTBLossReason_LossReasonCreativeFilteredCategoryExclusions:
    case ORTBLossReason_LossReasonCreativeFilteredCreativeAttributeExclusions:
    case ORTBLossReason_LossReasonCreativeFilteredAdTypeExclusions:
    case ORTBLossReason_LossReasonCreativeFilteredAnimationTooLong:
    case ORTBLossReason_LossReasonCreativeFilteredNotAllowedInDeal:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - ORTBOpenrtb

@implementation ORTBOpenrtb

@dynamic payloadOneOfCase;
@dynamic ver;
@dynamic domainspec;
@dynamic domainver;
@dynamic request;
@dynamic response;

typedef struct ORTBOpenrtb__storage_ {
  uint32_t _has_storage_[2];
  NSString *ver;
  NSString *domainspec;
  NSString *domainver;
  ORTBRequest *request;
  ORTBResponse *response;
} ORTBOpenrtb__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ver",
        .dataTypeSpecific.className = NULL,
        .number = ORTBOpenrtb_FieldNumber_Ver,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ORTBOpenrtb__storage_, ver),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "domainspec",
        .dataTypeSpecific.className = NULL,
        .number = ORTBOpenrtb_FieldNumber_Domainspec,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ORTBOpenrtb__storage_, domainspec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "domainver",
        .dataTypeSpecific.className = NULL,
        .number = ORTBOpenrtb_FieldNumber_Domainver,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ORTBOpenrtb__storage_, domainver),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "request",
        .dataTypeSpecific.className = GPBStringifySymbol(ORTBRequest),
        .number = ORTBOpenrtb_FieldNumber_Request,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ORTBOpenrtb__storage_, request),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "response",
        .dataTypeSpecific.className = GPBStringifySymbol(ORTBResponse),
        .number = ORTBOpenrtb_FieldNumber_Response,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ORTBOpenrtb__storage_, response),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ORTBOpenrtb class]
                                     rootClass:[ORTBOpenrtbRoot class]
                                          file:ORTBOpenrtbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ORTBOpenrtb__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "payload",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ORTBOpenrtb_ClearPayloadOneOfCase(ORTBOpenrtb *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - ORTBRequest

@implementation ORTBRequest

@dynamic id_p;
@dynamic test;
@dynamic tmax;
@dynamic at;
@dynamic curArray, curArray_Count;
@dynamic seatArray, seatArray_Count;
@dynamic wseat;
@dynamic cdata;
@dynamic hasSource, source;
@dynamic itemArray, itemArray_Count;
@dynamic package;
@dynamic hasContext, context;
@dynamic extArray, extArray_Count;

typedef struct ORTBRequest__storage_ {
  uint32_t _has_storage_[1];
  uint32_t tmax;
  uint32_t at;
  uint32_t package;
  NSString *id_p;
  NSMutableArray *curArray;
  NSMutableArray *seatArray;
  NSString *cdata;
  ORTBRequest_Source *source;
  NSMutableArray *itemArray;
  GPBAny *context;
  NSMutableArray *extArray;
} ORTBRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ORTBRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "test",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_FieldNumber_Test,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "tmax",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_FieldNumber_Tmax,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ORTBRequest__storage_, tmax),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "at",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_FieldNumber_At,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ORTBRequest__storage_, at),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "curArray",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_FieldNumber_CurArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ORTBRequest__storage_, curArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "seatArray",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_FieldNumber_SeatArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ORTBRequest__storage_, seatArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wseat",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_FieldNumber_Wseat,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "cdata",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_FieldNumber_Cdata,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ORTBRequest__storage_, cdata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "source",
        .dataTypeSpecific.className = GPBStringifySymbol(ORTBRequest_Source),
        .number = ORTBRequest_FieldNumber_Source,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ORTBRequest__storage_, source),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "itemArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ORTBRequest_Item),
        .number = ORTBRequest_FieldNumber_ItemArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ORTBRequest__storage_, itemArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "package",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_FieldNumber_Package,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ORTBRequest__storage_, package),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "context",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = ORTBRequest_FieldNumber_Context,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ORTBRequest__storage_, context),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "extArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = ORTBRequest_FieldNumber_ExtArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ORTBRequest__storage_, extArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ORTBRequest class]
                                     rootClass:[ORTBOpenrtbRoot class]
                                          file:ORTBOpenrtbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ORTBRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ORTBRequest_Source

@implementation ORTBRequest_Source

@dynamic tid;
@dynamic ds;
@dynamic dsgver;
@dynamic digest;
@dynamic cert;
@dynamic pchain;
@dynamic extArray, extArray_Count;

typedef struct ORTBRequest_Source__storage_ {
  uint32_t _has_storage_[1];
  uint32_t dsgver;
  NSString *tid;
  NSString *ds;
  NSString *digest;
  NSString *cert;
  NSString *pchain;
  NSMutableArray *extArray;
} ORTBRequest_Source__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tid",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Source_FieldNumber_Tid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ORTBRequest_Source__storage_, tid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ds",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Source_FieldNumber_Ds,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ORTBRequest_Source__storage_, ds),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dsgver",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Source_FieldNumber_Dsgver,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ORTBRequest_Source__storage_, dsgver),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "digest",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Source_FieldNumber_Digest,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ORTBRequest_Source__storage_, digest),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cert",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Source_FieldNumber_Cert,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ORTBRequest_Source__storage_, cert),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pchain",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Source_FieldNumber_Pchain,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ORTBRequest_Source__storage_, pchain),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = ORTBRequest_Source_FieldNumber_ExtArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ORTBRequest_Source__storage_, extArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ORTBRequest_Source class]
                                     rootClass:[ORTBOpenrtbRoot class]
                                          file:ORTBOpenrtbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ORTBRequest_Source__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ORTBRequest)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ORTBRequest_Item

@implementation ORTBRequest_Item

@dynamic id_p;
@dynamic qty;
@dynamic seq;
@dynamic flr;
@dynamic flrcur;
@dynamic exp;
@dynamic dt;
@dynamic dlvy;
@dynamic metricArray, metricArray_Count;
@dynamic dealArray, dealArray_Count;
@dynamic private_p;
@dynamic hasSpec, spec;
@dynamic extArray, extArray_Count;

typedef struct ORTBRequest_Item__storage_ {
  uint32_t _has_storage_[1];
  uint32_t qty;
  uint32_t seq;
  uint32_t exp;
  uint32_t dlvy;
  NSString *id_p;
  NSString *flrcur;
  NSString *dt;
  NSMutableArray *metricArray;
  NSMutableArray *dealArray;
  GPBAny *spec;
  NSMutableArray *extArray;
  double flr;
} ORTBRequest_Item__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Item_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ORTBRequest_Item__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "qty",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Item_FieldNumber_Qty,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ORTBRequest_Item__storage_, qty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "seq",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Item_FieldNumber_Seq,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ORTBRequest_Item__storage_, seq),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "flr",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Item_FieldNumber_Flr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ORTBRequest_Item__storage_, flr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "flrcur",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Item_FieldNumber_Flrcur,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ORTBRequest_Item__storage_, flrcur),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "exp",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Item_FieldNumber_Exp,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ORTBRequest_Item__storage_, exp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "dt",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Item_FieldNumber_Dt,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ORTBRequest_Item__storage_, dt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dlvy",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Item_FieldNumber_Dlvy,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ORTBRequest_Item__storage_, dlvy),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "metricArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ORTBRequest_Item_Metric),
        .number = ORTBRequest_Item_FieldNumber_MetricArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ORTBRequest_Item__storage_, metricArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "dealArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ORTBRequest_Item_Deal),
        .number = ORTBRequest_Item_FieldNumber_DealArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ORTBRequest_Item__storage_, dealArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "private_p",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Item_FieldNumber_Private_p,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "spec",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = ORTBRequest_Item_FieldNumber_Spec,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ORTBRequest_Item__storage_, spec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "extArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = ORTBRequest_Item_FieldNumber_ExtArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ORTBRequest_Item__storage_, extArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ORTBRequest_Item class]
                                     rootClass:[ORTBOpenrtbRoot class]
                                          file:ORTBOpenrtbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ORTBRequest_Item__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ORTBRequest)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ORTBRequest_Item_Metric

@implementation ORTBRequest_Item_Metric

@dynamic type;
@dynamic value;
@dynamic vendor;
@dynamic extArray, extArray_Count;

typedef struct ORTBRequest_Item_Metric__storage_ {
  uint32_t _has_storage_[1];
  float value;
  NSString *type;
  NSString *vendor;
  NSMutableArray *extArray;
} ORTBRequest_Item_Metric__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Item_Metric_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ORTBRequest_Item_Metric__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Item_Metric_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ORTBRequest_Item_Metric__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "vendor",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Item_Metric_FieldNumber_Vendor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ORTBRequest_Item_Metric__storage_, vendor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = ORTBRequest_Item_Metric_FieldNumber_ExtArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ORTBRequest_Item_Metric__storage_, extArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ORTBRequest_Item_Metric class]
                                     rootClass:[ORTBOpenrtbRoot class]
                                          file:ORTBOpenrtbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ORTBRequest_Item_Metric__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ORTBRequest_Item)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ORTBRequest_Item_Deal

@implementation ORTBRequest_Item_Deal

@dynamic id_p;
@dynamic flr;
@dynamic flrcur;
@dynamic at;
@dynamic wseatArray, wseatArray_Count;
@dynamic wadomainArray, wadomainArray_Count;
@dynamic extArray, extArray_Count;

typedef struct ORTBRequest_Item_Deal__storage_ {
  uint32_t _has_storage_[1];
  uint32_t at;
  NSString *id_p;
  NSString *flrcur;
  NSMutableArray *wseatArray;
  NSMutableArray *wadomainArray;
  NSMutableArray *extArray;
  double flr;
} ORTBRequest_Item_Deal__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Item_Deal_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ORTBRequest_Item_Deal__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "flr",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Item_Deal_FieldNumber_Flr,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ORTBRequest_Item_Deal__storage_, flr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "flrcur",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Item_Deal_FieldNumber_Flrcur,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ORTBRequest_Item_Deal__storage_, flrcur),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "at",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Item_Deal_FieldNumber_At,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ORTBRequest_Item_Deal__storage_, at),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "wseatArray",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Item_Deal_FieldNumber_WseatArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ORTBRequest_Item_Deal__storage_, wseatArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "wadomainArray",
        .dataTypeSpecific.className = NULL,
        .number = ORTBRequest_Item_Deal_FieldNumber_WadomainArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ORTBRequest_Item_Deal__storage_, wadomainArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = ORTBRequest_Item_Deal_FieldNumber_ExtArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ORTBRequest_Item_Deal__storage_, extArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ORTBRequest_Item_Deal class]
                                     rootClass:[ORTBOpenrtbRoot class]
                                          file:ORTBOpenrtbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ORTBRequest_Item_Deal__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ORTBRequest_Item)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ORTBResponse

@implementation ORTBResponse

@dynamic id_p;
@dynamic bidid;
@dynamic nbr;
@dynamic cur;
@dynamic cdata;
@dynamic seatbidArray, seatbidArray_Count;
@dynamic extArray, extArray_Count;

typedef struct ORTBResponse__storage_ {
  uint32_t _has_storage_[1];
  ORTBNoBidReason nbr;
  NSString *id_p;
  NSString *bidid;
  NSString *cur;
  NSString *cdata;
  NSMutableArray *seatbidArray;
  NSMutableArray *extArray;
} ORTBResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = ORTBResponse_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ORTBResponse__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bidid",
        .dataTypeSpecific.className = NULL,
        .number = ORTBResponse_FieldNumber_Bidid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ORTBResponse__storage_, bidid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "nbr",
        .dataTypeSpecific.enumDescFunc = ORTBNoBidReason_EnumDescriptor,
        .number = ORTBResponse_FieldNumber_Nbr,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ORTBResponse__storage_, nbr),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cur",
        .dataTypeSpecific.className = NULL,
        .number = ORTBResponse_FieldNumber_Cur,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ORTBResponse__storage_, cur),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cdata",
        .dataTypeSpecific.className = NULL,
        .number = ORTBResponse_FieldNumber_Cdata,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ORTBResponse__storage_, cdata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "seatbidArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ORTBResponse_Seatbid),
        .number = ORTBResponse_FieldNumber_SeatbidArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ORTBResponse__storage_, seatbidArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "extArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = ORTBResponse_FieldNumber_ExtArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ORTBResponse__storage_, extArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ORTBResponse class]
                                     rootClass:[ORTBOpenrtbRoot class]
                                          file:ORTBOpenrtbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ORTBResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ORTBResponse_Nbr_RawValue(ORTBResponse *message) {
  GPBDescriptor *descriptor = [ORTBResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ORTBResponse_FieldNumber_Nbr];
  return GPBGetMessageInt32Field(message, field);
}

void SetORTBResponse_Nbr_RawValue(ORTBResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [ORTBResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ORTBResponse_FieldNumber_Nbr];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - ORTBResponse_Seatbid

@implementation ORTBResponse_Seatbid

@dynamic seat;
@dynamic package;
@dynamic bidArray, bidArray_Count;
@dynamic extArray, extArray_Count;

typedef struct ORTBResponse_Seatbid__storage_ {
  uint32_t _has_storage_[1];
  NSString *seat;
  NSMutableArray *bidArray;
  NSMutableArray *extArray;
} ORTBResponse_Seatbid__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seat",
        .dataTypeSpecific.className = NULL,
        .number = ORTBResponse_Seatbid_FieldNumber_Seat,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid__storage_, seat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "package",
        .dataTypeSpecific.className = NULL,
        .number = ORTBResponse_Seatbid_FieldNumber_Package,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "bidArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ORTBResponse_Seatbid_Bid),
        .number = ORTBResponse_Seatbid_FieldNumber_BidArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid__storage_, bidArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "extArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = ORTBResponse_Seatbid_FieldNumber_ExtArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid__storage_, extArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ORTBResponse_Seatbid class]
                                     rootClass:[ORTBOpenrtbRoot class]
                                          file:ORTBOpenrtbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ORTBResponse_Seatbid__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ORTBResponse)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ORTBResponse_Seatbid_Bid

@implementation ORTBResponse_Seatbid_Bid

@dynamic id_p;
@dynamic item;
@dynamic price;
@dynamic deal;
@dynamic cid;
@dynamic tactic;
@dynamic purl;
@dynamic burl;
@dynamic lurl;
@dynamic exp;
@dynamic mid;
@dynamic macroArray, macroArray_Count;
@dynamic hasMedia, media;
@dynamic extArray, extArray_Count;

typedef struct ORTBResponse_Seatbid_Bid__storage_ {
  uint32_t _has_storage_[1];
  uint32_t exp;
  NSString *id_p;
  NSString *item;
  NSString *deal;
  NSString *cid;
  NSString *tactic;
  NSString *purl;
  NSString *burl;
  NSString *lurl;
  NSString *mid;
  NSMutableArray *macroArray;
  GPBAny *media;
  NSMutableArray *extArray;
  double price;
} ORTBResponse_Seatbid_Bid__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = ORTBResponse_Seatbid_Bid_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid_Bid__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "item",
        .dataTypeSpecific.className = NULL,
        .number = ORTBResponse_Seatbid_Bid_FieldNumber_Item,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid_Bid__storage_, item),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = ORTBResponse_Seatbid_Bid_FieldNumber_Price,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid_Bid__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "deal",
        .dataTypeSpecific.className = NULL,
        .number = ORTBResponse_Seatbid_Bid_FieldNumber_Deal,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid_Bid__storage_, deal),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "cid",
        .dataTypeSpecific.className = NULL,
        .number = ORTBResponse_Seatbid_Bid_FieldNumber_Cid,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid_Bid__storage_, cid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tactic",
        .dataTypeSpecific.className = NULL,
        .number = ORTBResponse_Seatbid_Bid_FieldNumber_Tactic,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid_Bid__storage_, tactic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "purl",
        .dataTypeSpecific.className = NULL,
        .number = ORTBResponse_Seatbid_Bid_FieldNumber_Purl,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid_Bid__storage_, purl),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "burl",
        .dataTypeSpecific.className = NULL,
        .number = ORTBResponse_Seatbid_Bid_FieldNumber_Burl,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid_Bid__storage_, burl),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lurl",
        .dataTypeSpecific.className = NULL,
        .number = ORTBResponse_Seatbid_Bid_FieldNumber_Lurl,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid_Bid__storage_, lurl),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "exp",
        .dataTypeSpecific.className = NULL,
        .number = ORTBResponse_Seatbid_Bid_FieldNumber_Exp,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid_Bid__storage_, exp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "mid",
        .dataTypeSpecific.className = NULL,
        .number = ORTBResponse_Seatbid_Bid_FieldNumber_Mid,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid_Bid__storage_, mid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "macroArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ORTBResponse_Seatbid_Bid_Macro),
        .number = ORTBResponse_Seatbid_Bid_FieldNumber_MacroArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid_Bid__storage_, macroArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "media",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = ORTBResponse_Seatbid_Bid_FieldNumber_Media,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid_Bid__storage_, media),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "extArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = ORTBResponse_Seatbid_Bid_FieldNumber_ExtArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid_Bid__storage_, extArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ORTBResponse_Seatbid_Bid class]
                                     rootClass:[ORTBOpenrtbRoot class]
                                          file:ORTBOpenrtbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ORTBResponse_Seatbid_Bid__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ORTBResponse_Seatbid)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ORTBResponse_Seatbid_Bid_Macro

@implementation ORTBResponse_Seatbid_Bid_Macro

@dynamic key;
@dynamic value;
@dynamic extArray, extArray_Count;

typedef struct ORTBResponse_Seatbid_Bid_Macro__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  NSString *value;
  NSMutableArray *extArray;
} ORTBResponse_Seatbid_Bid_Macro__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = ORTBResponse_Seatbid_Bid_Macro_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid_Bid_Macro__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = ORTBResponse_Seatbid_Bid_Macro_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid_Bid_Macro__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "extArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = ORTBResponse_Seatbid_Bid_Macro_FieldNumber_ExtArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ORTBResponse_Seatbid_Bid_Macro__storage_, extArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ORTBResponse_Seatbid_Bid_Macro class]
                                     rootClass:[ORTBOpenrtbRoot class]
                                          file:ORTBOpenrtbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ORTBResponse_Seatbid_Bid_Macro__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(ORTBResponse_Seatbid_Bid)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
